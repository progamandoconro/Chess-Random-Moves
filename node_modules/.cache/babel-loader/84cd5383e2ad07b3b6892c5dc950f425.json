{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = function () {\n  function sliceIterator(arr, i) {\n    var _arr = [];\n    var _n = true;\n    var _d = false;\n    var _e = undefined;\n\n    try {\n      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n        _arr.push(_s.value);\n\n        if (i && _arr.length === i) break;\n      }\n    } catch (err) {\n      _d = true;\n      _e = err;\n    } finally {\n      try {\n        if (!_n && _i[\"return\"]) _i[\"return\"]();\n      } finally {\n        if (_d) throw _e;\n      }\n    }\n\n    return _arr;\n  }\n\n  return function (arr, i) {\n    if (Array.isArray(arr)) {\n      return arr;\n    } else if (Symbol.iterator in Object(arr)) {\n      return sliceIterator(arr, i);\n    } else {\n      throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n    }\n  };\n}();\n\nvar charCodeOffset = 97;\nmodule.exports = {\n  fromPieceDecl: function fromPieceDecl(pos) {\n    var _pos$split = pos.split('@'),\n        _pos$split2 = _slicedToArray(_pos$split, 2),\n        piece = _pos$split2[0],\n        square = _pos$split2[1];\n\n    var x = square.toLowerCase().charCodeAt(0) - charCodeOffset;\n    var y = Number(square[1]) - 1;\n    return {\n      x: x,\n      y: y,\n      piece: piece,\n      square: square\n    };\n  },\n  charCodeOffset: charCodeOffset\n};","map":{"version":3,"sources":["/home/sony/chessro2/node_modules/react-chess/lib/decode.js"],"names":["_slicedToArray","sliceIterator","arr","i","_arr","_n","_d","_e","undefined","_i","Symbol","iterator","_s","next","done","push","value","length","err","Array","isArray","Object","TypeError","charCodeOffset","module","exports","fromPieceDecl","pos","_pos$split","split","_pos$split2","piece","square","x","toLowerCase","charCodeAt","y","Number"],"mappings":"AAAA;;AAEA,IAAIA,cAAc,GAAG,YAAY;AAAE,WAASC,aAAT,CAAuBC,GAAvB,EAA4BC,CAA5B,EAA+B;AAAE,QAAIC,IAAI,GAAG,EAAX;AAAe,QAAIC,EAAE,GAAG,IAAT;AAAe,QAAIC,EAAE,GAAG,KAAT;AAAgB,QAAIC,EAAE,GAAGC,SAAT;;AAAoB,QAAI;AAAE,WAAK,IAAIC,EAAE,GAAGP,GAAG,CAACQ,MAAM,CAACC,QAAR,CAAH,EAAT,EAAiCC,EAAtC,EAA0C,EAAEP,EAAE,GAAG,CAACO,EAAE,GAAGH,EAAE,CAACI,IAAH,EAAN,EAAiBC,IAAxB,CAA1C,EAAyET,EAAE,GAAG,IAA9E,EAAoF;AAAED,QAAAA,IAAI,CAACW,IAAL,CAAUH,EAAE,CAACI,KAAb;;AAAqB,YAAIb,CAAC,IAAIC,IAAI,CAACa,MAAL,KAAgBd,CAAzB,EAA4B;AAAQ;AAAE,KAAvJ,CAAwJ,OAAOe,GAAP,EAAY;AAAEZ,MAAAA,EAAE,GAAG,IAAL;AAAWC,MAAAA,EAAE,GAAGW,GAAL;AAAW,KAA5L,SAAqM;AAAE,UAAI;AAAE,YAAI,CAACb,EAAD,IAAOI,EAAE,CAAC,QAAD,CAAb,EAAyBA,EAAE,CAAC,QAAD,CAAF;AAAiB,OAAhD,SAAyD;AAAE,YAAIH,EAAJ,EAAQ,MAAMC,EAAN;AAAW;AAAE;;AAAC,WAAOH,IAAP;AAAc;;AAAC,SAAO,UAAUF,GAAV,EAAeC,CAAf,EAAkB;AAAE,QAAIgB,KAAK,CAACC,OAAN,CAAclB,GAAd,CAAJ,EAAwB;AAAE,aAAOA,GAAP;AAAa,KAAvC,MAA6C,IAAIQ,MAAM,CAACC,QAAP,IAAmBU,MAAM,CAACnB,GAAD,CAA7B,EAAoC;AAAE,aAAOD,aAAa,CAACC,GAAD,EAAMC,CAAN,CAApB;AAA+B,KAArE,MAA2E;AAAE,YAAM,IAAImB,SAAJ,CAAc,sDAAd,CAAN;AAA8E;AAAE,GAArO;AAAwO,CAAhoB,EAArB;;AAEA,IAAIC,cAAc,GAAG,EAArB;AAEAC,MAAM,CAACC,OAAP,GAAiB;AACfC,EAAAA,aAAa,EAAE,SAASA,aAAT,CAAuBC,GAAvB,EAA4B;AACzC,QAAIC,UAAU,GAAGD,GAAG,CAACE,KAAJ,CAAU,GAAV,CAAjB;AAAA,QACIC,WAAW,GAAG9B,cAAc,CAAC4B,UAAD,EAAa,CAAb,CADhC;AAAA,QAEIG,KAAK,GAAGD,WAAW,CAAC,CAAD,CAFvB;AAAA,QAGIE,MAAM,GAAGF,WAAW,CAAC,CAAD,CAHxB;;AAKA,QAAIG,CAAC,GAAGD,MAAM,CAACE,WAAP,GAAqBC,UAArB,CAAgC,CAAhC,IAAqCZ,cAA7C;AACA,QAAIa,CAAC,GAAGC,MAAM,CAACL,MAAM,CAAC,CAAD,CAAP,CAAN,GAAoB,CAA5B;AACA,WAAO;AAAEC,MAAAA,CAAC,EAAEA,CAAL;AAAQG,MAAAA,CAAC,EAAEA,CAAX;AAAcL,MAAAA,KAAK,EAAEA,KAArB;AAA4BC,MAAAA,MAAM,EAAEA;AAApC,KAAP;AACD,GAVc;AAYfT,EAAAA,cAAc,EAAEA;AAZD,CAAjB","sourcesContent":["'use strict';\n\nvar _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i[\"return\"]) _i[\"return\"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError(\"Invalid attempt to destructure non-iterable instance\"); } }; }();\n\nvar charCodeOffset = 97;\n\nmodule.exports = {\n  fromPieceDecl: function fromPieceDecl(pos) {\n    var _pos$split = pos.split('@'),\n        _pos$split2 = _slicedToArray(_pos$split, 2),\n        piece = _pos$split2[0],\n        square = _pos$split2[1];\n\n    var x = square.toLowerCase().charCodeAt(0) - charCodeOffset;\n    var y = Number(square[1]) - 1;\n    return { x: x, y: y, piece: piece, square: square };\n  },\n\n  charCodeOffset: charCodeOffset\n};"]},"metadata":{},"sourceType":"script"}