{"ast":null,"code":"import _slicedToArray from \"/home/sony/chessro2/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/sony/chessro2/src/Queen.js\";\nimport React, { useState } from 'react';\nimport Chess from 'react-chess';\nimport Diagonals from './const/Diagonals';\n\nconst Queen = () => {\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n  const numbers = ['1', '2', '3', '4', '5', '6', '7', '8'];\n\n  const _useState = useState('a'),\n        _useState2 = _slicedToArray(_useState, 2),\n        letter = _useState2[0],\n        setLetter = _useState2[1];\n\n  const _useState3 = useState('1'),\n        _useState4 = _slicedToArray(_useState3, 2),\n        number = _useState4[0],\n        setNumber = _useState4[1];\n\n  const _useState5 = useState(['Q@']),\n        _useState6 = _slicedToArray(_useState5, 1),\n        piece = _useState6[0];\n\n  const _useState7 = useState(['Q@a1']),\n        _useState8 = _slicedToArray(_useState7, 2),\n        position = _useState8[0],\n        handlePosition = _useState8[1];\n\n  const randomNumber = array => {\n    return Math.floor(Math.random() * array.length);\n  };\n\n  const makeQueenMove = () => {\n    const diagonal = [letter + number];\n\n    if (Number(Math.random()) > 0.499) {\n      if (Number(Math.random()) > 0.499) {\n        setNumber(numbers[randomNumber(numbers)]);\n      } else {\n        setLetter(letters[randomNumber(letters)]);\n      }\n\n      console.log(position, letter, number, 'caso 1');\n    } else {\n      for (let index = 0; index < Diagonals.length; index++) {\n        const cond = diagonal.some(val => Diagonals[index].indexOf(val) !== -1);\n\n        if (cond === true) {\n          const d = Diagonals[index];\n          const n = Math.floor(Math.random() * d.length);\n          const square = d[n];\n          const pos = square.split().toString();\n          setLetter(pos[0]);\n          setNumber(pos[1]);\n          console.log(position, letter, number, 'caso2', pos);\n          break;\n        }\n      }\n    }\n\n    handlePosition([piece + letter + number]);\n  };\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: e => makeQueenMove(e.target.value),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \" Move \"), React.createElement(\"hr\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }), React.createElement(Chess, {\n    pieces: position,\n    allowMoves: false,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }));\n};\n\nexport default Queen;","map":{"version":3,"sources":["/home/sony/chessro2/src/Queen.js"],"names":["React","useState","Chess","Diagonals","Queen","letters","numbers","letter","setLetter","number","setNumber","piece","position","handlePosition","randomNumber","array","Math","floor","random","length","makeQueenMove","diagonal","Number","console","log","index","cond","some","val","indexOf","d","n","square","pos","split","toString","e","target","value"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\nimport Chess from 'react-chess';\nimport Diagonals from './const/Diagonals'\n\n\nconst Queen = () => {\n    const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    const numbers = ['1', '2', '3', '4', '5', '6', '7', '8'];\n    const [letter, setLetter] = useState('a');\n    const [number, setNumber] = useState('1');\n    const [piece] = useState(['Q@']);\n    const [position, handlePosition] = useState(['Q@a1']);\n\n\n    const randomNumber = (array) => { return Math.floor(Math.random() * array.length); }\n\n\n    const makeQueenMove = () => {\n\n        const diagonal = [letter + number];\n\n\n        if (Number(Math.random()) > 0.499) {\n\n            if (Number(Math.random()) > 0.499) {\n                setNumber(numbers[randomNumber(numbers)]);\n\n\n            }\n            else {\n                setLetter(letters[randomNumber(letters)]);\n\n            }\n\n\n            console.log(position, letter, number, 'caso 1');\n\n        } else {\n\n\n            for (let index = 0; index < Diagonals.length; index++) {\n\n                const cond = diagonal.some((val) => Diagonals[index].indexOf(val) !== -1);\n                if (cond === true) {\n                    const d = Diagonals[index];\n                    const n = Math.floor(Math.random() * d.length);\n                    const square = d[n];\n\n                    const pos = square.split().toString();\n                    setLetter(pos[0]);\n                    setNumber(pos[1]);\n\n                    console.log(position, letter, number, 'caso2', pos);\n\n\n\n                    break;\n\n\n                }\n\n\n            }\n\n\n\n\n\n\n        }\n\n        handlePosition([piece + letter + number]);\n\n\n    }\n\n    return (\n        <div >\n            <button onClick={(e) => makeQueenMove(e.target.value)} > Move </button>\n            <hr />\n            <Chess pieces={position} allowMoves={false} />\n\n        </div>\n    )\n}\n\nexport default Queen;"]},"metadata":{},"sourceType":"module"}