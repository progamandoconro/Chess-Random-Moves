{"ast":null,"code":"const myRandomPositions = () => {\n  function getRandomInt(max) {\n    return Math.floor(Math.random() * Math.floor(max));\n  }\n\n  const chessPieces = ['K', 'k', 'R', 'Q', 'B', 'N', 'r', 'q', 'b', 'n', 'R', 'B', 'N', 'r', 'b', 'n', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'];\n  const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n  const numbers = ['1', '2', '3', '4', '5', '6', '7', '8']; //Set Board and Coordenates\n\n  const randomNumbers = () => getRandomInt(numbers.length);\n\n  const randomLetters = () => getRandomInt(letters.length);\n\n  const setBoard = [];\n\n  const randomCoordenates = () => {\n    const s = [];\n\n    for (let i = 0; i < 40; i++) {\n      s.push(letters[randomLetters()] + numbers[randomNumbers()]);\n    }\n\n    const coo = [...new Set(s)];\n\n    for (let i = 0; i < chessPieces.length; i++) {\n      setBoard.push(chessPieces[i] + '@' + coo[i]);\n    }\n\n    for (var i = setBoard.length - 1; i >= 0; i--) {\n      if (setBoard[i] === 'P@a1') {\n        setBoard.splice(i, 1); // break;       //<-- Uncomment  if only the first term has to be removed\n      }\n    }\n\n    const remove = (arr, what) => {\n      var found = arr.indexOf(what);\n\n      while (found !== -1) {\n        arr.splice(found, 1);\n        found = arr.indexOf(what);\n      }\n    };\n\n    const filterPaws = () => {\n      const elimina = remove(setBoard, 'P@a1', 'P@b1', 'P@c1', 'P@d1', 'P@e1', 'P@f1', 'P@g1', 'P@h1');\n      remove(setBoard, 'P@a8', 'P@b8', 'P@c8', 'P@d8', 'P@e8', 'P@f8', 'P@g8', 'P@h8');\n      remove(setBoard, 'P@a7', 'P@b7', 'P@c7', 'P@d7', 'P@e7', 'P@f7', 'P@g7', 'P@h7');\n      remove(setBoard, 'p@a1', 'p@b1', 'p@c1', 'p@d1', 'p@e1', 'p@f1', 'p@g1', 'p@h1');\n      remove(setBoard, 'p@a8', 'p@b8', 'p@c8', 'p@d8', 'p@e8', 'p@f8', 'p@g8', 'p@h8');\n      remove(setBoard, 'p@a7', 'p@b7', 'p@c7', 'p@d7', 'p@e7', 'p@f7', 'p@g7', 'p@h7');\n      console.log(elimina);\n    };\n\n    filterPaws();\n    return setBoard;\n  };\n\n  return randomCoordenates();\n};\n\nexport default myRandomPositions;","map":{"version":3,"sources":["/home/sony/chessro2/src/RandomPositions.js"],"names":["myRandomPositions","getRandomInt","max","Math","floor","random","chessPieces","letters","numbers","randomNumbers","length","randomLetters","setBoard","randomCoordenates","s","i","push","coo","Set","splice","remove","arr","what","found","indexOf","filterPaws","elimina","console","log"],"mappings":"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","sourcesContent":["\nconst myRandomPositions = () => {\n\n    function getRandomInt(max) {\n        return Math.floor(Math.random() * Math.floor(max));\n    }\n\n    const chessPieces = ['K', 'k', 'R', 'Q', 'B', 'N', 'r', 'q', 'b', 'n', 'R', 'B', 'N', 'r', 'b', 'n', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'P', 'p', 'p', 'p', 'p', 'p', 'p', 'p', 'p'];\n    const letters = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];\n    const numbers = ['1', '2', '3', '4', '5', '6', '7', '8'];\n\n    //Set Board and Coordenates\n    const randomNumbers = () => getRandomInt(numbers.length);\n    const randomLetters = () => getRandomInt(letters.length);\n    const setBoard = [];\n    const randomCoordenates = () => {\n        const s = [];\n        for (let i = 0; i < 40; i++) {\n            s.push(letters[randomLetters()] + numbers[randomNumbers()])\n\n        }\n        const coo = [...new Set(s)];\n\n        for (let i = 0; i < chessPieces.length; i++) {\n            setBoard.push(chessPieces[i] + '@' + coo[i])\n\n        }\n\n        for (var i = setBoard.length - 1; i >= 0; i--) {\n            if (setBoard[i] === 'P@a1') {\n                setBoard.splice(i, 1);\n                // break;       //<-- Uncomment  if only the first term has to be removed\n            }\n        }\n        const remove = (arr, what) => {\n            var found = arr.indexOf(what);\n\n            while (found !== -1) {\n                arr.splice(found, 1);\n                found = arr.indexOf(what);\n            }\n        }\n\n        const filterPaws = () => {\n\n            const elimina = remove(setBoard, 'P@a1', 'P@b1', 'P@c1', 'P@d1', 'P@e1', 'P@f1', 'P@g1', 'P@h1');\n            remove(setBoard, 'P@a8', 'P@b8', 'P@c8', 'P@d8', 'P@e8', 'P@f8', 'P@g8', 'P@h8');\n            remove(setBoard, 'P@a7', 'P@b7', 'P@c7', 'P@d7', 'P@e7', 'P@f7', 'P@g7', 'P@h7');\n\n            remove(setBoard, 'p@a1', 'p@b1', 'p@c1', 'p@d1', 'p@e1', 'p@f1', 'p@g1', 'p@h1');\n            remove(setBoard, 'p@a8', 'p@b8', 'p@c8', 'p@d8', 'p@e8', 'p@f8', 'p@g8', 'p@h8');\n            remove(setBoard, 'p@a7', 'p@b7', 'p@c7', 'p@d7', 'p@e7', 'p@f7', 'p@g7', 'p@h7');\n\n            console.log(elimina);\n\n        }\n\n        filterPaws()\n        return setBoard\n\n    }\n\n    return randomCoordenates();\n}\n\nexport default myRandomPositions;"]},"metadata":{},"sourceType":"module"}